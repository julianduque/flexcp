#!/usr/bin/env ruby
require 'mongo'

# TODO: This file is subject to refactorization.. so much spaghetti code

Dir[File.join(File.dirname(__FILE__), "lib", "*.rb")].each do |file|
  require file
end

# Application Help
def usage
  puts 'Usage: flexcp COMMAND [PROJECT] [command-specific-options]'
  puts ''
  puts 'Available commands, type "flexcp help COMMAND" for more details:'
  puts '  new       # create a project'
  puts '  list      # list all projects'
  puts '  show      # show project content'
  puts '  delete    # delete a project'
  puts '  load      # load a file'
  puts '  process   # process the data'
  puts ''
end

def error(command)
  puts "*   `#{command}` it's not a valid flexcp command"
end

if ARGV.empty?
  usage
  exit
end

command = ARGV.shift

# Load modules
admin = FlexCP::Admin.new
loader = FlexCP::Loader.new
processor = FlexCP::Processor.new

case command
  # New project command
  when 'new'
    project_name = ARGV.shift
    if project_name
      admin.new(project_name)
    else
      puts "project name required"
    end
  # List projects command
  when 'list'
    admin.list
  # Show project content command
  when 'show'
    project_name = ARGV.shift
    if project_name
      admin.show(project_name)
    else
      puts "project name required"
    end
  # Delete project command
  when 'delete'
    project_name = ARGV.shift
    if project_name
      admin.delete(project_name)
    else
      puts "project name required"
    end
  # Load files to a project command
  when 'load'
    if ARGV.empty?
      loader.help
      exit
    end
    
    if ARGV.size == 3
      project_name = ARGV.shift
      height = ARGV.shift
      filename = ARGV.shift
      loader.load(project_name, height, filename)
    else
      loader.help
    end
  # Process project files command 
  when 'process'
    if ARGV.empty?
      processor.help
      exit
    end
    
    if ARGV.size < 3
      puts "*  process: not enough arguments"
      exit
    end
    
    project_name = ARGV.shift
    lt = ARGV.shift
    trajectories = ARGV
    processor.process(project_name, lt, trajectories)    
  # Help command
  when 'help'
    help_command = ARGV.shift
    case help_command
      when 'new', 'delete', 'list'
        admin.help(help_command)
      when 'load'
        loader.help
      when 'process'
        processor.help
      else
        error(help_command)  
    end
  # Alternative  help command 
  when '--help' , '-h'
    usage
  else
    error(ARGV.first)
end